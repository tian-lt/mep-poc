//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MEPLexer.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class MEPLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Dot=1, Plus=2, Minus=3, Mul=4, Div=5, Caret=6, EBase=7, Integer=8, Float=9, 
		SciNumber=10, HexNumber=11, Whitespace=12, Newline=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Dot", "Plus", "Minus", "Mul", "Div", "Caret", "EBase", "Digit", "Integer", 
		"Float", "SciNumber", "HexDigit", "HexNumber", "Whitespace", "Newline"
	};


	public MEPLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MEPLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'+'", "'-'", "'*'", "'/'", "'^'", "'e'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Dot", "Plus", "Minus", "Mul", "Div", "Caret", "EBase", "Integer", 
		"Float", "SciNumber", "HexNumber", "Whitespace", "Newline"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MEPLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MEPLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xF', '\x62', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x6', '\n', '\x33', '\n', '\n', '\r', '\n', '\xE', '\n', 
		'\x34', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', ':', '\n', 
		'\v', '\x3', '\v', '\x5', '\v', '=', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\x42', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', 'H', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x6', '\xE', 'O', '\n', 
		'\xE', '\r', '\xE', '\xE', '\xE', 'P', '\x3', '\xF', '\x6', '\xF', 'T', 
		'\n', '\xF', '\r', '\xF', '\xE', '\xF', 'U', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\\', '\n', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '_', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x2', '\x2', '\x11', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', 
		'\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\x2', '\x13', '\n', '\x15', 
		'\v', '\x17', '\f', '\x19', '\x2', '\x1B', '\r', '\x1D', '\xE', '\x1F', 
		'\xF', '\x3', '\x2', '\x5', '\x3', '\x2', '\x32', ';', '\x5', '\x2', '\x32', 
		';', '\x43', 'H', '\x63', 'h', '\x4', '\x2', '\v', '\v', '\"', '\"', '\x2', 
		'h', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x3', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x5', '#', '\x3', '\x2', '\x2', '\x2', '\a', '%', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\'', '\x3', '\x2', '\x2', '\x2', '\v', ')', '\x3', 
		'\x2', '\x2', '\x2', '\r', '+', '\x3', '\x2', '\x2', '\x2', '\xF', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '/', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x15', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x43', '\x3', '\x2', '\x2', '\x2', '\x19', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', 'N', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x1F', '^', '\x3', '\x2', '\x2', '\x2', 
		'!', '\"', '\a', '\x30', '\x2', '\x2', '\"', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '#', '$', '\a', '-', '\x2', '\x2', '$', '\x6', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\a', '/', '\x2', '\x2', '&', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\a', ',', '\x2', '\x2', '(', '\n', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\a', '\x31', '\x2', '\x2', '*', '\f', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\a', '`', '\x2', '\x2', ',', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\a', 'g', '\x2', '\x2', '.', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\t', '\x2', '\x2', '\x2', '\x30', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x33', '\x5', '\x11', '\t', '\x2', 
		'\x32', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x37', '\x5', '\x13', '\n', '\x2', '\x37', '\x39', '\x5', '\x3', 
		'\x2', '\x2', '\x38', ':', '\x5', '\x13', '\n', '\x2', '\x39', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x42', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x5', '\x13', '\n', '\x2', 
		'<', ';', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x5', '\x3', '\x2', '\x2', 
		'?', '@', '\x5', '\x13', '\n', '\x2', '@', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x36', '\x3', '\x2', '\x2', '\x2', '\x41', '<', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x16', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\x5', '\x15', '\v', '\x2', '\x44', 'G', '\x5', '\xF', '\b', '\x2', 
		'\x45', 'H', '\x5', '\x5', '\x3', '\x2', '\x46', 'H', '\x5', '\a', '\x4', 
		'\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x5', '\x13', 
		'\n', '\x2', 'J', '\x18', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\t', 
		'\x3', '\x2', '\x2', 'L', '\x1A', '\x3', '\x2', '\x2', '\x2', 'M', 'O', 
		'\x5', '\x19', '\r', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 
		'P', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'T', '\t', '\x4', '\x2', '\x2', 'S', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\b', '\xF', '\x2', '\x2', 'X', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', 'Y', '[', '\a', '\xF', '\x2', '\x2', 'Z', '\\', '\a', '\f', 
		'\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\\', '_', '\x3', '\x2', '\x2', '\x2', ']', '_', 
		'\a', '\f', '\x2', '\x2', '^', 'Y', '\x3', '\x2', '\x2', '\x2', '^', ']', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x61', '\b', '\x10', '\x2', '\x2', '\x61', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x2', '\x34', '\x39', '<', '\x41', 'G', 'P', 'U', '[', '^', 
		'\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
