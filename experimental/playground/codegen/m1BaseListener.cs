//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from m1.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="Im1Listener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class m1BaseListener : Im1Listener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.translation_unit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTranslation_unit([NotNull] m1Parser.Translation_unitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.translation_unit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTranslation_unit([NotNull] m1Parser.Translation_unitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] m1Parser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] m1Parser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.addition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddition([NotNull] m1Parser.AdditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.addition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddition([NotNull] m1Parser.AdditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.subtraction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubtraction([NotNull] m1Parser.SubtractionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.subtraction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubtraction([NotNull] m1Parser.SubtractionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] m1Parser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] m1Parser.TermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.product"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProduct([NotNull] m1Parser.ProductContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.product"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProduct([NotNull] m1Parser.ProductContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.quotient"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuotient([NotNull] m1Parser.QuotientContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.quotient"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuotient([NotNull] m1Parser.QuotientContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactor([NotNull] m1Parser.FactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactor([NotNull] m1Parser.FactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.postfix_unary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostfix_unary_expression([NotNull] m1Parser.Postfix_unary_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.postfix_unary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostfix_unary_expression([NotNull] m1Parser.Postfix_unary_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.exponentiation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExponentiation([NotNull] m1Parser.ExponentiationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.exponentiation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExponentiation([NotNull] m1Parser.ExponentiationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtom([NotNull] m1Parser.AtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtom([NotNull] m1Parser.AtomContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.parenthesized"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesized([NotNull] m1Parser.ParenthesizedContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.parenthesized"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesized([NotNull] m1Parser.ParenthesizedContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.prefix_unary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrefix_unary_expression([NotNull] m1Parser.Prefix_unary_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.prefix_unary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrefix_unary_expression([NotNull] m1Parser.Prefix_unary_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="m1Parser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction([NotNull] m1Parser.FunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="m1Parser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction([NotNull] m1Parser.FunctionContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
